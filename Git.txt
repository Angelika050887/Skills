Git — это система управления версиями (система контроля версий) с распределенной архитектурой, которая позволяет
сразу нескольким разработчикам сохранять и отслеживать изменения в файлах проекта.

Репозиторий Git — это виртуальное хранилище проекта. В нём можно хранить версии кода для дальнейшего доступа к нему.

Git хранит имеющиеся данные в виде набора «снимков», называемых коммитами. 
Коммиты хранят состояние файловой системы в конкретный момент времени,
а также имеют указатель на предыдущие коммиты. Каждый коммит содержит уникальный контрольный идентификатор, 
который используется Git, чтобы ссылаться на этот коммит.

Команды Git:

1) Инициализация нового репозитория: git init
2) Настройка имени пользователя и email:
git config --global user.name "[UserName]"
git config --global user.email "[UserEmail]"
Флаг --global задаёт имя автора, которое будет использоваться для всех коммитов, выполненных текущим пользователем.
Добавление аргумента --local или выполнение команды без параметра уровня конфигурации приведёт к установке 
значения user.name для текущего локального репозитория. 
3) Клонирование репозитория 
git clone [Copied SSH key] 
(создаётся локальный клон уже настроенного проекта в центральном репозитории).
4) Сохранение изменений 
git add [FileName] 
(добавляет изменения из рабочего каталога в раздел проиндексированных файлов и сообщает Git, 
что изменения должны быть включены в конкретном файле в следующий коммит). 
5) Добавление изменений 
git commit -m "[MessageText]" 
(добавляет проиндексированный снимок состояния в историю проекта).
6) Переписывание истории 
git commit --amend 
(позволяет внести изменения в последний коммит, например, если вы забыли 
проиндексировать файл или не указали важную информацию в комментарии к коммиту).
   Перезапись коммита
git commit --amend -m "[MessageText]"
7) Проверка репозитория 
git status 
(показывает состояние рабочего каталога и проиндексированного снимка состояния; 
можно увидеть файлы, которые не отслеживаются Git). 
8) Проверка репозитория 
git log 
(позволяет просмотреть коммиты, сделанные в репозиториях- показывает историю коммитов).
9) Синхронизация 
git pull 
(загружает ветку из удалённого репозитория и сразу же объединяет её с текущей веткой). 
10) Синхронизация 
git push 
(с её помощью можно перенести локальную ветку в другой репозиторий и опубликовать поступивший код).
11) Просмотр удалённых подключений к репозиториям 
git remote -v 
Флаг -v включает URL-адрес каждого подключения.
12) Сброс изменений с локального файла
git checkout -- [FileName]
Можно сбросить изменения с нескольких локальных файлов при помощи команды
checkout . (есть пробел между командой и точкой).
13) Удаление неотслеживаемых файлов в рабочем каталоге репозитория- удаление новых файлов (не в индексе)
git clean -xdf
Неотслеживаемые файлы — это файлы в каталоге репозитория, которые еще не добавлены в раздел проиндексированных 
файлов репозитория с помощью команды git add .
14) Отмена локальных изменений в репозитории
git reset -- [FileName]
15) Удаление коммита
git reset HEAD~[NumberOfCommits]
16) Безопасная отмена изменений (коммиты не удаляются)
git revert [SHA1]
Вместо удаления коммита из истории проекта эта команда отменяет внесенные в нём изменения и добавляет новый коммит с полученным содержимым. 
В результате история в Git не теряется, что важно для обеспечения целостной истории версий и надежной совместной работы.
Целью для команды git revert можно выбрать любой отдельный коммит в истории проекта,в то время как действие команды git reset
может отменить только коммит, предшествующий текущему. Данная команда не создает угрозу потери кода.
